# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: CI

on: [push, pull_request]

jobs:
  tests:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:

          - name: Try latest versions of all dependencies
            os: ubuntu-latest
            python: '3.11'
            toxenv: py311-latest-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python }}

    - name: Install Python dependencies
      run: | 
          python -m pip install --upgrade pip
          pip install tox tox-conda>=0.2
          pip install pytest pytest-cov>=4.0
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

          
    - name: STPSF Data
      run: | # Get STPSF data files (just a subset of the full dataset!) and set up environment variable
        wget https://arizona.box.com/shared/static/url7q77887o933tgc4ten2fa2e3q6sna.gz -O /tmp/minimal-stpsf-data.tar.gz
        tar -xzvf /tmp/minimal-stpsf-data.tar.gz
        echo "STPSF_PATH=${{github.workspace}}/stpsf-data" >> $GITHUB_ENV

    - name: Get CDBS Data
      run: | # Get subset of CDBS data files and set up environment variable
        wget https://arizona.box.com/shared/static/wgq7ymqsp8e7jfno8yk6o2igbnqlad8z.zip -O /tmp/cdbs_min_tests.zip
        unzip /tmp/cdbs_min_tests.zip
        echo "PYSYN_CDBS=${{github.workspace}}/cdbs_min_tests" >> $GITHUB_ENV

    - name: Set webbpsf_ext Data Path
      run: | # Set up webbpsf_ext data environment variable
        echo "WEBBPSF_EXT_PATH=$(mktemp -d)" >> $GITHUB_ENV
        

    - name: Check conda info
      run: conda info

    # - name: Test with pytest
    #   run: |
    #     pytest

    - name: Test with pytest  
      run: |  
        coverage run -m pytest  -v -s
      continue-on-error: true
    - name: Generate Coverage Report  
      run: |  
        coverage report -m

    # - name: Run tests via tox
    #   if: ${{ contains(matrix.toxenv,'test') }}
    #   run: |
    #     tox -e ${{ matrix.toxenv }}
    
    # - name: Run tests
    #   if: ${{ matrix.continue-on-error == null && contains(matrix.toxenv,'-latest') != true }}
    #   run: tox -e ${{ matrix.toxenv }}

    # - name: Run tests and allow failures
    #   if: matrix.continue-on-error
    #   continue-on-error: true
    #   run: tox -e ${{ matrix.toxenv }}
